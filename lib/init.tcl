# This is the initialisation script of the 'jam' plugin

# Copyright (C) 2012 Alexander Shpilkin
# Copyright (c) 2012 WorkWare Systems http://www.workware.net.au/

# @synopsis:
#
# The 'jam' module provides support for using autosetup alongside the FT-Jam
# build tool.

use system

module-options {}

# Remember the jam plugin directory
set jamlib $::usedir

# @make-jam-stub
#
# Creates a stub Jamfile for out-of-tree builds.
proc make-jam-stub {} {
	set srcdir [get-define srcdir]

	if {$srcdir eq "."} {
		# In-tree build
		return
	}

	write-if-changed Jamfile [subst {# This file was automatically generated by 'configure'

BUILD_TOP = . ;
TOP		  = "$srcdir" ;
LOCATE on Jamconfig = \$(BUILD_TOP) ;
include \[ FDirName \$(TOP) Jamfile \] ;
AutoGen Jamfile ;}]	 {
		msg-result "Created top-level Jamfile"
	}
}

# @make-jam-config fileName ?autoJam=auto.jam?
#
# Writes a Jam configuration file into 'fileName'. Imports all autosetup
# 'defines' needed by modules into 'Jam' variables. If given, 'autoJam'
# specifies an alternative name for the file containing project-specific
# Jam configuration.
proc make-jam-config {fileName {autoJam auto.jam}} {
	set		srcdir [get-define srcdir]
	set		lines {}
	lappend lines "# This file was automatically generated by 'configure'"
	lappend lines "JAMCONFIGURED = yes ;"

	array set vars {}
	array set locs {}
	array set deps {}

	# process and include autosetup/*.jam
	# XXX: Access to internal variable $::libmodule
	foreach module [lsort [concat autosetup [array names ::libmodule]]] {
		set jamFile [file join $::jamlib $module.jam]
		if {![file exists $jamFile]} {
			continue
		}

		jamconfig_file $jamFile lines vars locs
		set jamName [jam_escape [relative-path $jamFile $srcdir]]
		lappend lines "LOCATE on $jamName = \$(TOP) ;"
		lappend lines "include $jamName ;"
	}

	# process Jamrules and **/Jamfile
	foreach jamFile [find-jam-files] {
		jamconfig_file $jamFile lines vars locs
		lappend lines "# processed [relative-path $jamFile $srcdir]"
	}

	# process and include auto.jam
	set autoJam [file join $srcdir $autoJam]
	if {[file exists $autoJam]} {
		jamconfig_file $autoJam lines vars locs
		set jamName [jam_escape [relative-path $autoJam $srcdir]]
		lappend lines "LOCATE on $jamName = \$(TOP) ;"
		lappend lines "include $jamName ;"
	}

	write-if-changed $fileName [join $lines \n] {
		msg-result "Created $fileName"
	}
}

# @find-jam-files
#
# Enumerates all Jam sources inside the source directory.
proc find-jam-files {} {
	set srcdir [get-define srcdir]
	set result {}
	set jamRules [file join $srcdir Jamrules]
	if {[file exists $jamRules]} {
		lappend result $jamRules
	}
	find_jamfiles result $srcdir
	return $result
}

proc find_jamfiles {varName dir} {
	upvar $varName files

	set jamFile [file join $dir Jamfile]
	if {[file exists $jamFile]} {
		lappend files $jamFile
	}

	foreach name [readdir $dir] {
		set subDir [file join $dir $name]
		if {[file isdir $subDir]} {
			find_jamfiles files $subDir
		}
	}
}

proc jamconfig_file {fileName linesVar varsVar locsVar} {
	upvar $linesVar lines $varsVar var $locsVar locs
	set srcdir [get-define srcdir]
	set relName [relative-path $fileName $srcdir]
	lappend lines ""

	foreach line [split [readfile $fileName] \n] {
		incr lineNum
		set location $relName:$lineNum
		if {[regexp -nocase {(^\s*|\s+)#\s*autosetup\s+:(.*)$} $line -> _ bindings]} {
			foreach binding [split $bindings] {
				if {$binding eq ""} continue
				jamconfig_var $binding $location lines vars locs
			}
		} elseif {[regexp -nocase {(^\s*|\s+)#\s*(autosetup[^:]*:)} $line -> _ directive]} {
			user-notice "$location: Warning: Unrecognized autosetup/jam directive \"$directive\""
		}
	}
}

proc jamconfig_var {binding location linesVar varsVar locsVar} {
	upvar $linesVar lines $varsVar vars $locsVar locs

	set format "%-40s # %s"

	lassign [split $binding =] varName define
	if {$define eq ""} {
		set define $varName
	}

	if {[info exists vars($varName)]} {
		if {$vars($varName) ne $define} {
			user-notice "$locs($varName): See original definition of \$($varName)"
			autosetup-error "$location: Redefinition of Jam variable \$($varName)"
		}
		lappend lines [format $format "# $varName is already defined" $location]
	} else {
		set vars($varName) $define
		set locs($varName) $location
		set value [get-define $define ""]

		if {$value ni {"" 0 false}} {
			lappend lines [format $format "$varName = [jam_escape $value] ;" $location]
		} else {
			lappend lines [format $format "# $varName = [jam_escape $value] ;" $location]
		}
	}
}

proc jam_escape {value} {
	set specialChars [list \\ \\\\ \$ \\\$ # \\# \" \\\"]
	return \"[string map $specialChars $value]\"
}
